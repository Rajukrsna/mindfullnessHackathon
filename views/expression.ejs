<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="/public/styles/style.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap" rel="stylesheet">

<!-- Include Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet" />

<!-- Include Popper.js and Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"></script>


<style>
    body {
      font-family: 'Poppins', sans-serif;
      background-color: #eef2f7;
      color: #333;
    }
    .emotion-card {
      animation: fadeIn 1s ease-in-out;
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .meditation-section {
      margin-top: 20px;
      animation: slideIn 1s ease-in-out;
    }
    @keyframes slideIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .loading-spinner {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 1050;
    }
    .spinner-border {
      width: 3rem;
      height: 3rem;
    }
  </style>
<body>
  <div class= "container">

  
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">
          <img src="/public/images/med.png" alt="App Logo" width="30" height="30" class="d-inline-block align-top">
          Serinity
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto">
            <!-- Profile Dropdown -->
            <li class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                <img src="/public/images/defImg.jpg" alt="Profile" width="30" height="30" class="rounded-circle">
              </a>
              <ul class="dropdown-menu" aria-labelledby="navbarDropdown">
                <li><a class="dropdown-item" href="/profile">View Profile</a></li>
              </ul>
            </li>
          </ul>
        </div>
      </nav>

<!-- Navbar -->

  
<div class="text-center mb-5">
    <h1 class="display-4 fw-bold text-primary">Welcome to Serenity</h1>
    <p class="lead text-muted">Discover your inner calm and let us guide you toward peace and mindfulness. üßò</p>
    <img src="/public/images/med.png" alt="Meditation" class="img-fluid rounded shadow" style="max-height: 400px;">
</div>
<div class="row">
    <div class="col-md-6">

        <div class="card shadow-lg border-0 mx-auto" style="max-width: 600px; background: #f7f9fc;">
            <div class="card-body p-4">
                <h3 class="card-title text-center text-primary mb-3">Analyze Your Mood</h3>
                <p class="text-center text-muted">Upload your photo to let our AI detect your emotions and guide you to tranquility.</p>
                <form  id="problemForm" action="/facialExpression/analyze" method="POST" enctype="multipart/form-data">
                    <div class="mb-4">
                        <label for="image" class="form-label fw-bold text-muted">Upload Your Photo</label>
                        <input type="file" id="image" name="image" class="form-control form-control-lg shadow-sm" required>
                    </div>
                    <button type="submit" class="btn btn-primary btn-lg w-100 shadow-sm">Analyze Mood üßò‚Äç‚ôÇÔ∏è</button>
                </form>
            </div>
        </div>

       </div>
       <div class="col-md-6">
        <div class="card shadow-lg" id="emotionCardContainer">

<!-- Loading Spinner -->
<div class="loading-spinner">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
        </div>
        </div>

        <div id="meditationSection"></div>
        <div class="loading-spinner">
            <div class="spinner-border text-primary" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </div>
             
</div>
</div>


<div class="modal fade" id="meditationModal" tabindex="-1" aria-labelledby="meditationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="meditationModalLabel">Meditation Practice</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body text-center">
          <div id="videoContainer" class="mb-3">
            <!-- Video will be inserted dynamically here -->
          </div>
          <div>
            <p id="meditationDescription" class="text-muted"></p>
            <button id="playAudioBtn" class="btn btn-secondary mb-3">Play Instructions</button>
          </div>
          <div id="timer" class="text-primary h4">15:00</div>
          <div class="btn-group mt-3">
            <button id="startPauseTimerBtn" class="btn btn-success">
              <i id="playIcon" class="bi bi-play-circle"></i> Start Meditation
            </button>
            <button id="pauseTimerBtn" class="btn btn-warning" style="display: none;">
              <i id="pauseIcon" class="bi bi-pause-circle"></i> Pause
            </button>
          </div>
        </div>
      </div>
    </div>
</div>












  <script>
    document.getElementById("problemForm").addEventListener("submit", function (e) {

        e.preventDefault();
        const formData = new FormData(this);
        const loadingSpinner = document.querySelector(".loading-spinner");
    
        // Show the loading spinner
        loadingSpinner.style.display = "block";
    
        // Send AJAX request to backend
        fetch('/facialExpression/analyze', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                const emotionCardContainer = document.getElementById("emotionCardContainer");
                let emotion = data.output.mood;
                emotionCardContainer.innerHTML = `
      <div class="card emotion-card shadow-lg border-0 mx-auto" style="max-width: 600px; background: ${getBackgroundColor(emotion)};">
        <div class="card-body p-4 text-center">
          <img src="${getEmotionImage(emotion)}" alt="${emotion}" class="img-fluid rounded-circle mb-3" style="width: 100px; height: 100px;">
          <h3 class="card-title text-primary mb-3">Detected Emotion: ${emotion}</h3>
          <p class="text-muted mb-4">${getEmotionMessage(emotion)}</p>
          <button id="getMeditationBtn" class="btn btn-success btn-lg shadow-sm">Get Meditation</button>
        </div>
      </div>
    `;
    
                // Attach click listener to the button after it's created
                document.getElementById("getMeditationBtn").addEventListener("click", function () {
                    const meditationSection = document.getElementById("meditationSection");
    
                    // Send AJAX request to backend
                    fetch('/medRecommend/medRecommend', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ mood: emotion }) // Send emotion as JSON payload
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                            return response.text();
                        })
                        .then(data => {
                            // Assuming the response is already parsed JSON
                            const responseObject = JSON.parse(data);
        const accumulatedDelta = responseObject.accumulatedDelta;
        console.log("accumulatedData", accumulatedDelta)
        const cleanedData = accumulatedDelta
        .replace(/```/g, '') // Remove any backticks
          .trim();  // Remove leading/trailing whitespace

        const parsedData = JSON.parse(cleanedData);
                            meditationSection.innerHTML = `
        <div class="meditation-section container">
            <h2 class="text-center text-primary mb-4">Meditation Practices</h2>
            <div class="row">
                ${
                    parsedData.practices?.map((practice, index) => `
                        <div class="col-md-4">
                            <div class="card shadow-lg border-0 mb-4">
                                <div class="card-body">
                                    <h4 class="card-title text-primary">${practice.name}</h4>
                                    <p class="text-muted">${practice.description}</p>
                                    <p><strong> Benefits:</strong> ${practice.benefits.join(', ')}</p>
                                    <button class="btn btn-primary shadow-sm" data-index="${index}">Start Practice</button>
                                </div>
                            </div>
                        </div>
                    `).join('') || '<p>No meditation practices available.</p>'
                }
            </div>
        </div>
    `;
    
                            // Event delegation for dynamically added buttons
                            meditationSection.addEventListener("click", function (e) {
                                if (e.target && e.target.classList.contains("btn-primary")) {
                                    const buttonIndex = e.target.getAttribute("data-index");
                                    const practice = parsedData.practices[buttonIndex];
                                    openMeditationModal(practice);
                                }
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while fetching meditation recommendations. Please try again.');
                        });
                });
            })
            .catch(error => {
                console.error('Error:', error);
                alert('An error occurred during analysis. Please try again.');
            });
    });
    
    function openMeditationModal(practice) {
        const videoContainer = document.getElementById("videoContainer");
        const meditationDescription = document.getElementById("meditationDescription");
        const timerDisplay2 = document.getElementById("timer");
    
        // Clear any existing content
        videoContainer.innerHTML = '';
        timerDisplay2.textContent = "15:00";
    
        // Add video element
        videoContainer.innerHTML = `
        <video id="meditationVideo" class="w-100 rounded" controls>
          <source src="${practice.videoUrl || 'https://www.w3schools.com/html/mov_bbb.mp4'}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      `;
    
        // Add description
        meditationDescription.textContent = practice.description;
    
        // Initialize audio synthesis for AI reading
        const playAudioBtn = document.getElementById("playAudioBtn");
        playAudioBtn.addEventListener("click", () => {
            const utterance = new SpeechSynthesisUtterance(practice.description);
            utterance.lang = "en-US";
            window.speechSynthesis.speak(utterance);
        });
    
        // Initialize timer
        let timer;
let isRunning = false; // Timer state
let timeLeft = 15 * 60; // 15 minutes in seconds
let timerDisplay = document.getElementById("timer");
let playIcon = document.getElementById("playIcon");
let pauseIcon = document.getElementById("pauseIcon");

document.getElementById("startPauseTimerBtn").addEventListener("click", () => {
    if (isRunning) {
        // If timer is already running, pause it
        clearInterval(timer);
        document.getElementById("pauseTimerBtn").style.display = "none"; // Hide Pause button
        document.getElementById("startPauseTimerBtn").style.display = "inline-block"; // Show Start button
        isRunning = false;
        playIcon.style.display = "inline-block"; // Show Play button
        pauseIcon.style.display = "none"; // Hide Pause button
    } else {
        // If timer is not running, start or resume it
        document.getElementById("startPauseTimerBtn").style.display = "none"; // Hide Start button
        document.getElementById("pauseTimerBtn").style.display = "inline-block"; // Show Pause button
        playIcon.style.display = "none"; // Hide Play button
        pauseIcon.style.display = "inline-block"; // Show Pause button

        timer = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            timerDisplay.textContent = `${minutes}:${seconds < 10 ? "0" + seconds : seconds}`;
            timeLeft -= 1;

            if (timeLeft < 0) {
                clearInterval(timer);
                timerDisplay.textContent = "Session Completed!";
                // Voice feedback when session is completed
                const speech = new SpeechSynthesisUtterance("Session completed. Well done!");
                window.speechSynthesis.speak(speech);
            }
        }, 1000);

        isRunning = true;
    }
});

// Pause button functionality
document.getElementById("pauseTimerBtn").addEventListener("click", () => {
    if (isRunning) {
        clearInterval(timer);
        document.getElementById("pauseTimerBtn").style.display = "none"; // Hide Pause button
        document.getElementById("startPauseTimerBtn").style.display = "inline-block"; // Show Start button
        playIcon.style.display = "inline-block"; // Show Play button
        pauseIcon.style.display = "none"; // Hide Pause button
        isRunning = false;
    }
});

    
        // Show the modal
        const meditationModal = new bootstrap.Modal(document.getElementById("meditationModal"));
        meditationModal.show();
    }
    
    function getBackgroundColor(emotion) {
        const colors = {
            Happy: "#d4edda",
            Sad: "#f8d7da",
            Angry: "#fce4ec",
            Surprised: "#fff3cd",
            Neutral: "#e2e3e5"
        };
        return colors[emotion] || "#f7f9fc";
    }
    
    function getEmotionImage(emotion) {
        const images = {
            happy: "/public/images/happyimg.jpg",
            Sad: "/public/images/sad.png",
            Angry: "/public/images/angry.png",
            Surprised: "/public/images/surprised.png",
            Neutral: "/public/images/neutral.png"
        };
        return images[emotion] || "/public/images/default.jpg";
    }
    
    function getEmotionMessage(emotion) {
        const messages = {
            Happy: "You look cheerful! Let's keep the positivity flowing! üòä",
            Sad: "It's okay to feel down sometimes. Here's something to lift your spirits. üåà",
            Angry: "Take a deep breath. Let's find some calm together. üßò",
            Surprised: "What a surprise! Let's channel this energy positively. üéâ",
            Neutral: "Feeling neutral? Let's add a spark to your day! üåü"
        };
        return messages[emotion] || "Let's explore your emotions further.";
    }
    </script>
    





</body>